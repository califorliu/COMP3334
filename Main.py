import Encrypt

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from public_class import SQL_method
from Encrypt import TOTP



class Main:

    # for register event.
    # when the user registers an account, conveniently bind the user's mobile phone.
    # if the code entered by the user matches the one-time code generated by the mobile phone, then the binding is successful.
    def isCodeInBindAccountQueue(self, code):
        # Ensure code is an integer for comparison
        code = int(code) if not isinstance(code, int) else code
        for i, entry in enumerate(self.bindAccount_queue):
            # Ensure queue code is treated as integer
            queue_code = int(entry.get("code")) if not isinstance(entry.get("code"), int) else entry.get("code")
            if queue_code == code:
                # Remove and return the matched entry
                entry = self.bindAccount_queue.pop(i)
                return entry["user_id"], entry["secret_key"]
        return None, None
    
    def bindDeviceID(self, user_id, deviceID):
        try:
            success = SQL_method.bindDeviceByUserID(deviceID, user_id)
            return success
        except Exception as e:
            print(f"❌ Error binding deviceID: {e}")
            return False
    _instance = None


    # bindAccount_queue stores temporary binding information during the account binding process.
    # Each dictionary contains:
    # {
    #     "user_id": int,             # ID of the user
    #     "code": int                 # Random code for identifying or verifying the binding
    # }
    bindAccount_queue = []

    # queue_OTP stores recent OTPs for each user to verify incoming OTPs from devices.
    # Each dictionary contains:
    # {
    #     "user_id": int,             # ID of the user
    #     "HTOP": str           # List of 5 OTPs (2 before, current counter, and 2 after current counter)
    # }
    queue_TOTP = []


    logged_in_users = []


    # server generate OTP by counter, then save into bindAccount_queue to wait for verity.
    # due to each client and server having its own counter, to improve fault tolerance, calculate the counters from the 2 before, current counter and after 2 counter.
    @classmethod
    def generateTOTP(cls, user_id: int):
        secret_result = SQL_method.getUserSecretByID(user_id)
        if not secret_result or not secret_result[0]:
            print("❌ Failed to get secret key from DB.")
            return

        secret_key = secret_result[0]  # string-only (computing)

        hotp = Encrypt.TOTP(secret_key)  # TOTP changed every 30 seconds
        entry = {
            "user_id": user_id,
            "HTOP": [hotp]  # Wrap it in a list to make the logic of the comparison universal.
        }

        cls.queue_TOTP.append(entry)
        print(f"✅ TOTP queued for user {user_id}: {hotp}")

    # check if OTP_fromMobile is in the queue_OTP queue.
    # if yes, return true(user login success). otherwise byebye.
    @classmethod
    def verity_user_TOTP(cls, OTP_fromMobile: str, user_id: int):
        for entry in cls.queue_TOTP:
            if entry["user_id"] != user_id: continue;

            if OTP_fromMobile in entry["HTOP"]:
                print(f"✅ OTP verified for user {user_id}")
                cls.logged_in_users.append(user_id)
                return True
            else:
                print(f"❌ OTP mismatch for user {user_id}")
                return False

        print(f"❌ No OTP entry found for user {user_id}")
        return False

    @classmethod
    def is_user_logged_in(cls, user_id: int):
        if user_id in cls.logged_in_users:
            cls.logged_in_users.remove(user_id)
            return True
        return False




    @classmethod

    # for Singleton pattern.
    def __init__(self):
        self.bindAccount_queue = []
        self.queue_OTP = []

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super(Main, cls).__new__(cls)
            cls._instance.__init__()
        return cls._instance